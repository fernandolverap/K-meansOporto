// 
// Input data: archivos delimitados por comas
// latitud (4 campo) y longitud (5 campo)


import scala.math.pow

// distancia entre dos puntos
def distanceSquared
(p1: (Double,Double), p2: (Double,Double)) = { 
  pow(p1._1 - p2._1,2) + pow(p1._2 - p2._2,2 )
}

// suma de dos puntos
def addPoints
(p1: (Double,Double), p2: (Double,Double)) = {
  (p1._1 + p2._1, p1._2 + p2._2)
}


//para un punto p en un array de puntos, 
//regresa el indice en el array mas cercano al punto p
def closestPoint(p: (Double,Double), points: Array[(Double,Double)]): Int = {
    var index = 0
    var bestIndex = 0
    var closest = Double.PositiveInfinity

    for (i <- 0 until points.length) {
      val dist = distanceSquared(p,points(i))
      if (dist < closest) {
        closest = dist
        bestIndex = i
      }
    }
    bestIndex
}

// Lectura de archivos
val filename = "/loudacre/all_coordenates/*"

// K es numero de centros a encontrar
val K = 8

// umbral de distancia entre cada centro 
//para saber cuando parar
val convergeDist = .01D
    
// parsea el archivo y lo corta por comas
// parsea latitud y longitud que son
//la cuarta y quinta columna
val puntos = sc.textFile(filename).
     map(line => line.split(',')).
     map(fields => 
     (fields(3).toDouble,fields(4).toDouble)).
     persist()

//inicia con k centros elgidos aleatoriamento 
//del dataset
val kPoints = points.takeSample(false, K)
println("Starting K points:")
kPoints.foreach(println) 

// loop que termina hasta que 
//la distancia entre los puntos 
//y los centros converga o 
//no varia mucho en cada iteracion

var tempDist = Double.PositiveInfinity
while (tempDist > convergeDist) {


    val closest = 
    points.map(p => (closestPoint(p, kPoints), (p, 1)))

    val pointStats = 
    closest.reduceByKey{case ((point1,n1),(point2,n2)) 
    => (addPoints(point1,point2),n1+n2) }

    val newPoints = 
    pointStats.map{case (i,(point,n))
    => (i,(point._1/n,point._2/n))}.collectAsMap()
    

    tempDist = 0.0
    for (i <- 0 until K) {
      
      tempDist += distanceSquared(kPoints(i),
      newPoints(i))
    }
    println("distancia entre iteraciones: "+tempDist)

    for (i <- 0 until K) {
      kPoints(i) = newPoints(i)
    }
}
   
// desplieaga los centros finales       
println("Final K points: " )
kPoints.foreach(println)
